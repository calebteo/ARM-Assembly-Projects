


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Hamming2, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000 E59F0160        LDR              r0, =0xb6b
    7 00000004         
    8 00000004         ;clearing bit - r12 will be 8bit of r0 (12bits to 8bits)
                       
    9 00000004 E3A0C000        LDR              r12,  =0x0
   10 00000008 E2005C0F        AND              r5, r0, #0xF00
   11 0000000C E02CC225        EOR              r12, r12, r5, LSR #4
   12 00000010 E2005070        AND              r5, r0, #0x070
   13 00000014 E02CC1A5        EOR              r12, r12, r5, LSR #3
   14 00000018 E2005004        AND              r5, r0, #0x004
   15 0000001C E02CC125        EOR              r12, r12, r5, LSR #2
   16 00000020         
   17 00000020         ;Finding c0,c1,c2,c3 - uses r1,r2,r3,r4,r9,r10,r11
   18 00000020 E1A0B00C        MOV              r11, r12
   19 00000024         
   20 00000024 E3A0A001        LDR              r10,  =0x1
   21 00000028 E3A01000        LDR              r1,  =0x0   ;hold c0
   22 0000002C E3A02000        LDR              r2,  =0x0   ;hold c1
   23 00000030 E3A03000        LDR              r3,  =0x0   ;hold c2
   24 00000034 E3A04000        LDR              r4,  =0x0   ;hold c3
   25 00000038         
   26 00000038 E00B900A        AND              r9, r11, r10
   27 0000003C E0891001        ADD              r1, r9, r1
   28 00000040 E0892002        ADD              r2, r9, r2
   29 00000044 E1A0B0AB        MOV              r11, r11, LSR #1
   30 00000048         
   31 00000048 E00B900A        AND              r9, r11, r10
   32 0000004C E0891001        ADD              r1, r9, r1
   33 00000050 E0893003        ADD              r3, r9, r3
   34 00000054 E1A0B0AB        MOV              r11, r11, LSR #1
   35 00000058         
   36 00000058 E00B900A        AND              r9, r11, r10
   37 0000005C E0892002        ADD              r2, r9, r2
   38 00000060 E0893003        ADD              r3, r9, r3
   39 00000064 E1A0B0AB        MOV              r11, r11, LSR #1
   40 00000068         
   41 00000068 E00B900A        AND              r9, r11, r10
   42 0000006C E0891001        ADD              r1, r9, r1
   43 00000070 E0892002        ADD              r2, r9, r2
   44 00000074 E0893003        ADD              r3, r9, r3
   45 00000078 E1A0B0AB        MOV              r11, r11, LSR #1
   46 0000007C         
   47 0000007C E00B900A        AND              r9, r11, r10
   48 00000080 E0891001        ADD              r1, r9, r1
   49 00000084 E0894004        ADD              r4, r9, r4
   50 00000088 E1A0B0AB        MOV              r11, r11, LSR #1
   51 0000008C         
   52 0000008C E00B900A        AND              r9, r11, r10
   53 00000090 E0892002        ADD              r2, r9, r2
   54 00000094 E0894004        ADD              r4, r9, r4
   55 00000098 E1A0B0AB        MOV              r11, r11, LSR #1
   56 0000009C         
   57 0000009C E00B900A        AND              r9, r11, r10
   58 000000A0 E0891001        ADD              r1, r9, r1



ARM Macro Assembler    Page 2 


   59 000000A4 E0892002        ADD              r2, r9, r2
   60 000000A8 E0894004        ADD              r4, r9, r4
   61 000000AC E1A0B0AB        MOV              r11, r11, LSR #1
   62 000000B0         
   63 000000B0 E00B900A        AND              r9, r11, r10
   64 000000B4 E0893003        ADD              r3, r9, r3
   65 000000B8 E0894004        ADD              r4, r9, r4
   66 000000BC         
   67 000000BC E3A0500F        MOV              r5, #0xF
   68 000000C0 E3A06007        MOV              r6, #0x7
   69 000000C4 E3A07001        MOV              r7, #0x1
   70 000000C8         
   71 000000C8         ;Separating 8 bits to 4, 3, 1
   72 000000C8 E005526C        AND              r5, r5, r12, ROR #4
   73 000000CC E00660EC        AND              r6, r6, r12, ROR #1
   74 000000D0 E007700C        AND              r7, r7, r12
   75 000000D4         
   76 000000D4         ;Recombining bits to have 12 bits - 4 c3 3 c2 1 c1 c0 (8
                       bits to 12bits)
   77 000000D4 E3A08000        MOV              r8, #0x0
   78 000000D8 E0858008        ADD              r8, r5, r8
   79 000000DC E1A08208        MOV              r8, r8, LSL #4
   80 000000E0 E0868008        ADD              r8, r6, r8
   81 000000E4 E1A08108        MOV              r8, r8, LSL #2
   82 000000E8 E0878008        ADD              r8, r7, r8
   83 000000EC E1A08108        MOV              r8, r8, LSL#2
   84 000000F0         
   85 000000F0         ;Determining the count as even or odd
   86 000000F0 E2044001        AND              r4, r4, #0x1
   87 000000F4 E2033001        AND              r3, r3, #0x1
   88 000000F8 E2022001        AND              r2, r2, #0x1
   89 000000FC E2011001        AND              r1, r1, #0x1
   90 00000100         
   91 00000100         ;Shifting bits to relevent slots
   92 00000100 E1A04384        MOV              r4, r4, LSL #7
   93 00000104 E1A03183        MOV              r3, r3, LSL #3
   94 00000108 E1A02082        MOV              r2, r2, LSL #1
   95 0000010C         
   96 0000010C E0248008        EOR              r8, r4, r8
   97 00000110 E0238008        EOR              r8, r3, r8
   98 00000114 E0228008        EOR              r8, r2, r8
   99 00000118 E0218008        EOR              r8, r1, r8
  100 0000011C         
  101 0000011C         ;Error bit indicator in r5, bit indicator in r6
  102 0000011C E0205008        EOR              r5, r0, r8
  103 00000120 E2056003        AND              r6, r5, #0x3
  104 00000124 E2057008        AND              r7, r5, #0x08
  105 00000128 E02660A7        EOR              r6, r6, r7, LSR#1
  106 0000012C E2057080        AND              r7, r5, #0x80
  107 00000130 E0266227        EOR              r6, r6, r7, LSR#4
  108 00000134         
  109 00000134 E2466001        SUB              r6, r6, #0x1
  110 00000138 E3A07001        MOV              r7, #0x1
  111 0000013C E1A07617        LSL              r7, r7, r6
  112 00000140         
  113 00000140 E0200007        EOR              r0, r0, r7
  114 00000144         
  115 00000144         ;(12bits to 8bits)
  116 00000144 E3A01000        LDR              r1,  =0x0



ARM Macro Assembler    Page 3 


  117 00000148 E2002C0F        AND              r2, r0, #0xF00
  118 0000014C E0211222        EOR              r1, r1, r2, LSR #4
  119 00000150 E2002070        AND              r2, r0, #0x070
  120 00000154 E02111A2        EOR              r1, r1, r2, LSR #3
  121 00000158 E2002004        AND              r2, r0, #0x004
  122 0000015C E0211122        EOR              r1, r1, r2, LSR #2
  123 00000160         
  124 00000160 E1A00001        MOV              r0, r1
  125 00000164         
  126 00000164         
  127 00000164 EAFFFFFE 
                       stop    B                stop
  128 00000168         
  129 00000168                 END
              00000B6B 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\f
irstprogram.d -o.\firstprogram.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine
="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 516" --predefine="NO_C
LOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SE
TA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\firstpr
ogram.lst FirstProgram.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Hamming2 00000000

Symbol: Hamming2
   Definitions
      At line 1 in file FirstProgram.s
   Uses
      None
Comment: Hamming2 unused
start 00000000

Symbol: start
   Definitions
      At line 5 in file FirstProgram.s
   Uses
      At line 3 in file FirstProgram.s
Comment: start used once
stop 00000164

Symbol: stop
   Definitions
      At line 127 in file FirstProgram.s
   Uses
      At line 127 in file FirstProgram.s
Comment: stop used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file FirstProgram.s
   Uses
      None
Comment: main unused
1 symbol
344 symbols in table
